from src.analysis.AUserAnalyzer import AUserAnalyzerfrom src.analysis.Analyzer import Analyzerfrom src.helpers.DataManager import DataManagerfrom src.helpers.LanguageClassifier import detect_langfrom src.models.user.FbUser import FbUserclass FbUserAnalyzer(AUserAnalyzer):    def __init__(self):        self.work_skills = DataManager().work_skills        def analyze(self, user: FbUser):        user = self.analyze_skills(user)        user = self.analyze_interests(user)        return user        # def analyze_skills(self, user: FbUser):    #     """    #     Analyzes users skills according to job positions he had    #     :param user: FbUser object    #     """    #     skills = [-1] * len(self.work_skills.get('skill_names').get('en'))    #     for user_job in user.jobs:    #         lang = detect_lang(user_job)    #         for i, jobs in enumerate(self.work_skills.get('jobs').get(lang, [])):    #             if user_job in jobs:    #                 print(user_job)    #                 skills[i] = skills[i] + 1    #     user.skills = skills    #     print(skills)    #     print('Skill names')    #     for i, skill in enumerate(skills):    #         if skill >= 0:    #             print(self.work_skills.get('skill_names').get('en')[i])    #     return user        def analyze_skills(self, user):        user.skills = Analyzer().analyze_skills(user.jobs)        return user        def analyze_interests(self, user):        interests = set()        if len(user.education) > 5:            interests.add('Self education')        if len(user.languages) > 4:            interests.add('Languages')            interests.add('Self education')        # TODO        return user